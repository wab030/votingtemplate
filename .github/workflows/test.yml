name: Teste da Prova de Programa√ß√£o

on:
  push:
    branches: [ "master" ]
  # Evento que dispara no fork do aluno, com permiss√µes baixas.
  # pull_request: 
  #   branches: [ "master" ]
  # Evento que queremos usar, que dispara no seu repo, com permiss√µes altas.
  pull_request_target: 
    types: [opened, synchronize, reopened]
    branches: [ "master" ]

jobs:
  relatorio-completo:
    runs-on: ubuntu-latest
    # ADICIONE ESTE BLOCO:
    permissions:
      contents: read # M√≠nimo necess√°rio para a execu√ß√£o.
    env:
      GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
    
    # FIM DO BLOCO
    services:
      mysql:
        image: mysql:8
        env:
          MYSQL_ROOT_PASSWORD: root
          MYSQL_USER: admin
          MYSQL_PASSWORD: ifsp@1234
        ports:
          - 3306:3306
        options: >-
          --health-cmd="mysqladmin ping -h localhost -uadmin -pifsp@1234"
          --health-interval=10s
          --health-timeout=5s
          --health-retries=5

    steps:
      # 1. Checkout do seu reposit√≥rio (BASE) - Apenas o necess√°rio para o YAML
      # Removemos o ref para ser mais gen√©rico.
      - name: Checkout Base Repository (Para A√ß√µes)
        uses: actions/checkout@v4
        # N√£o especificamos 'ref', usa o contexto do workflow.

      # 2. Fetch e Checkout SEGURO do c√≥digo do aluno (HEAD)
      - name: Fetch and Checkout Student Code (HEAD of PR)
        if: github.event_name == 'pull_request_target'
        run: |
          echo "Fetching code from fork: ${{ github.event.pull_request.head.repo.clone_url }}"
          
          # A√ß√£o 1: Fetch do c√≥digo do aluno
          git fetch ${{ github.event.pull_request.head.repo.clone_url }} ${{ github.event.pull_request.head.ref }}
          
          # A√ß√£o 2: Sobrescreve TUDO com o c√≥digo do aluno.
          # Isso deve garantir que o scripts/init.sql do aluno seja o √∫nico no diret√≥rio.
          git checkout -f FETCH_HEAD
          
          echo "Student code is now active."

      - name: Instalar Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      - name: Instalar depend√™ncias
        run: npm install

      - name: Aguardar MySQL subir
        run: |
          echo "Esperando MySQL..."
          for i in {30..0}; do
            if mysqladmin ping -h"127.0.0.1" -uroot -proot --silent; then
              echo "MySQL est√° rodando!"
              break
            fi
            echo "Aguardando MySQL... ($i segundos restantes)"
            sleep 2
          done
      
      # O restante do pipeline permanece o mesmo, mas agora
      # a etapa Gemini ter√° acesso ao secret.
      
      - name: Criar arquivo de relat√≥rio com cabe√ßalho
        # ADICIONADO: Vari√°vel TZ para for√ßar o fuso hor√°rio de Bras√≠lia
        env:
          TZ: America/Sao_Paulo 
        run: |
          # 1. Captura a data e hora formatadas
          CURRENT_DATE=$(date +"%d/%m/%Y %H:%M:%S %Z")
          
          # 2. L√≥gica para determinar o login do aluno
          if [ "${{ github.event_name }}" == "pull_request_target" ]; then
              STUDENT_LOGIN="${{ github.event.pull_request.user.login }}"
              STUDENT_ID="${{ github.event.pull_request.user.id }}"
              STUDENT_EMAIL="${STUDENT_ID}+${STUDENT_LOGIN}@users.noreply.github.com"
          else
              STUDENT_LOGIN="${{ github.actor }}"
              STUDENT_EMAIL="${{ github.actor }}@users.noreply.github.com"
          fi
          
          echo "# Relat√≥rio de An√°lise Automatizada" > relatorio-final.md
          
          # 3. Adiciona a data/hora e o evento
          echo "### ‚è±Ô∏è Executado em:" >> relatorio-final.md
          echo "* **Data/Hora:** \`${CURRENT_DATE}\`" >> relatorio-final.md
          echo "* **Evento:** \`${{ github.event_name }}\`" >> relatorio-final.md
          echo "---" >> relatorio-final.md

          echo "### üë§ Informa√ß√µes do Aluno" >> relatorio-final.md
          echo "* **Username:** \`${STUDENT_LOGIN}\`" >> relatorio-final.md
          echo "* **E-mail (No-Reply):** \`${STUDENT_EMAIL}\`" >> relatorio-final.md
          echo "---" >> relatorio-final.md

      - name: Criar usu√°rio e esquema inicial
        run: |
          mysql -h 127.0.0.1 -uroot -proot < scripts/init.sql

      - name: Diagnosticar conex√£o com o usu√°rio admin
        run: |
          mysql -h 127.0.0.1 -uadmin -pifsp@1234 -e "SHOW DATABASES;"

      - name: Rodar testes e adicionar ao relat√≥rio
        run: |
          echo "## üß™ Resultado dos Testes Unit√°rios" >> relatorio-final.md
          npm test -- --colors=false 2>&1 | tee -a >> relatorio-final.md
        env:
          DB_HOST: 127.0.0.1
          DB_USER: admin
          DB_PASSWORD: ifsp@1234
          DB_NAME: cadastro

      - name: Rodar ESLint e adicionar ao relat√≥rio
        if: always()
        run: |
          echo "## üßπ An√°lise de Estilo do C√≥digo (ESLint)" >> relatorio-final.md
          npx eslint src/**/*.js 2>&1 | tee -a >> relatorio-final.md

      - name: An√°lise de C√≥digo com IA (Gemini)
        # Este passo agora funcionar√° porque o workflow roda com acesso total aos Secrets
        if: always() 
        run: |
          echo "## üß† An√°lise de C√≥digo com Gemini" >> relatorio-final.md
          # Injeta a chave, executa o script e envia a sa√≠da (stdout e stderr via 2>&1)
          # tanto para o console (tee) quanto para o arquivo (-a).
          GEMINI_API_KEY="${{ secrets.GEMINI_API_KEY }}" node scripts/ai_review.js 2>&1 | tee -a relatorio-final.md

      - name: Consolidar relat√≥rio da IA
        if: always()
        run: |
          ANALYSIS_FILE="reports/ai-code-review.md"
          
          # 1. VERIFICA se o arquivo foi gerado pelo script anterior
          if [ -f "$ANALYSIS_FILE" ]; then
              # Se o arquivo existir, anexa o conte√∫do (com sucesso)
              echo "‚úÖ An√°lise da IA conclu√≠da e anexada ao relat√≥rio." 
              cat "$ANALYSIS_FILE" >> relatorio-final.md
          else
              # Se o arquivo N√ÉO existir (falha da IA), adiciona um aviso CLARO
              echo "---" >> relatorio-final.md
              echo "## ‚ö†Ô∏è FALHA NA AN√ÅLISE DE C√ìDIGO COM GEMINI" >> relatorio-final.md
              echo "A an√°lise de c√≥digo foi interrompida ou falhou. Isso pode ocorrer por um dos seguintes motivos:" >> relatorio-final.md
              echo "* **Chave de API Inv√°lida (403):** O secret 'GEMINI_API_KEY' n√£o foi acessado (verifique o log do passo anterior)." >> relatorio-final.md
              echo "* **Timeout:** A chamada √† API da IA demorou demais." >> relatorio-final.md
              echo "* **Erro no Script:** Verifique o log do passo 'An√°lise de C√≥digo com IA (Gemini)' para mais detalhes." >> relatorio-final.md
              echo "" >> relatorio-final.md
              echo "‚ùå N√£o foi poss√≠vel gerar o resumo de problemas." >> relatorio-final.md
              
              # Tamb√©m adiciona uma mensagem clara de falha no console (log)
              echo "::error::O arquivo de an√°lise do Gemini ($ANALYSIS_FILE) n√£o foi gerado. A etapa de AI falhou."
          fi

      - name: Uploadar Relat√≥rio Final
        uses: actions/upload-artifact@v4
        with:
          # √â bom diferenciar o nome do artefato por aluno, se poss√≠vel
          name: Relatorio-Completo-${{ github.event.pull_request.user.login || github.actor }}
          path: relatorio-final.md