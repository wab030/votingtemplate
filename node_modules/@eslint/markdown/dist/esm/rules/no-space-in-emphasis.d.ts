declare const _default: {
    meta: {
        type: "problem";
        docs: {
            recommended: boolean;
            description: string;
            url: string;
        };
        fixable: "whitespace";
        messages: {
            spaceInEmphasis: string;
        };
        schema: {
            type: "object";
            properties: {
                checkStrikethrough: {
                    type: "boolean";
                };
            };
            additionalProperties: false;
        }[];
        defaultOptions: [{
            checkStrikethrough: false;
        }];
    };
    create(context: import("@eslint/core").RuleContext<{
        LangOptions: import("../types.js").MarkdownLanguageOptions;
        Code: import("../index.js").MarkdownSourceCode;
        RuleOptions: NoSpaceInEmphasisOptions;
        Node: import("mdast").Node;
        MessageIds: "spaceInEmphasis";
    }>): {
        heading(node: Heading): void;
        "heading > text"(node: any): void;
        "heading:exit"(node: Heading): void;
        paragraph(node: Paragraph): void;
        "paragraph > text"(node: any): void;
        "paragraph:exit"(node: Paragraph): void;
        tableCell(node: TableCell): void;
        "tableCell > text"(node: any): void;
        "tableCell:exit"(node: TableCell): void;
    };
};
export default _default;
/**
 * Finds all emphasis markers in the text.
 */
export type EmphasisMarker = {
    marker: string;
    startIndex: number;
    endIndex: number;
};
export type NoSpaceInEmphasisMessageIds = "spaceInEmphasis";
export type NoSpaceInEmphasisOptions = [{
    checkStrikethrough?: boolean;
}];
export type NoSpaceInEmphasisRuleDefinition = MarkdownRuleDefinition<{
    RuleOptions: NoSpaceInEmphasisOptions;
    MessageIds: NoSpaceInEmphasisMessageIds;
}>;
import type { Heading } from "mdast";
import type { Paragraph } from "mdast";
import type { TableCell } from "mdast";
import type { MarkdownRuleDefinition } from "../types.js";
